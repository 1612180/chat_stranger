// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "github.com/1612180/chat_stranger/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserService is a mock of UserService interface
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// SignUp mocks base method
func (m *MockUserService) SignUp(user *model.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SignUp indicates an expected call of SignUp
func (mr *MockUserServiceMockRecorder) SignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserService)(nil).SignUp), user)
}

// LogIn mocks base method
func (m *MockUserService) LogIn(user *model.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogIn", user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// LogIn indicates an expected call of LogIn
func (mr *MockUserServiceMockRecorder) LogIn(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIn", reflect.TypeOf((*MockUserService)(nil).LogIn), user)
}

// Info mocks base method
func (m *MockUserService) Info(id int) (*model.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Info indicates an expected call of Info
func (mr *MockUserServiceMockRecorder) Info(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockUserService)(nil).Info), id)
}

// UpdateInfo mocks base method
func (m *MockUserService) UpdateInfo(id int, new *model.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInfo", id, new)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateInfo indicates an expected call of UpdateInfo
func (mr *MockUserServiceMockRecorder) UpdateInfo(id, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInfo", reflect.TypeOf((*MockUserService)(nil).UpdateInfo), id, new)
}

// UpdatePassword mocks base method
func (m *MockUserService) UpdatePassword(id int, new *model.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", id, new)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword
func (mr *MockUserServiceMockRecorder) UpdatePassword(id, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserService)(nil).UpdatePassword), id, new)
}
