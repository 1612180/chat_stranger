// Code generated by MockGen. DO NOT EDIT.
// Source: chat.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "github.com/1612180/chat_stranger/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockChatService is a mock of ChatService interface
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// FindAnyRoom mocks base method
func (m *MockChatService) FindAnyRoom(userID int) (model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAnyRoom", userID)
	ret0, _ := ret[0].(model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAnyRoom indicates an expected call of FindAnyRoom
func (mr *MockChatServiceMockRecorder) FindAnyRoom(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAnyRoom", reflect.TypeOf((*MockChatService)(nil).FindAnyRoom), userID)
}

// FindNextRoom mocks base method
func (m *MockChatService) FindNextRoom(userID int) (model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNextRoom", userID)
	ret0, _ := ret[0].(model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNextRoom indicates an expected call of FindNextRoom
func (mr *MockChatServiceMockRecorder) FindNextRoom(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNextRoom", reflect.TypeOf((*MockChatService)(nil).FindNextRoom), userID)
}

// FindSameGenderRoom mocks base method
func (m *MockChatService) FindSameGenderRoom(userID int) (model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSameGenderRoom", userID)
	ret0, _ := ret[0].(model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSameGenderRoom indicates an expected call of FindSameGenderRoom
func (mr *MockChatServiceMockRecorder) FindSameGenderRoom(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSameGenderRoom", reflect.TypeOf((*MockChatService)(nil).FindSameGenderRoom), userID)
}

// FindSameBirthYearRoom mocks base method
func (m *MockChatService) FindSameBirthYearRoom(userID int) (model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSameBirthYearRoom", userID)
	ret0, _ := ret[0].(model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSameBirthYearRoom indicates an expected call of FindSameBirthYearRoom
func (mr *MockChatServiceMockRecorder) FindSameBirthYearRoom(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSameBirthYearRoom", reflect.TypeOf((*MockChatService)(nil).FindSameBirthYearRoom), userID)
}

// Join mocks base method
func (m *MockChatService) Join(userID, roomID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", userID, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join
func (mr *MockChatServiceMockRecorder) Join(userID, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockChatService)(nil).Join), userID, roomID)
}

// Leave mocks base method
func (m *MockChatService) Leave(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leave", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leave indicates an expected call of Leave
func (mr *MockChatServiceMockRecorder) Leave(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockChatService)(nil).Leave), userID)
}

// SendMessage mocks base method
func (m *MockChatService) SendMessage(userID int, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", userID, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockChatServiceMockRecorder) SendMessage(userID, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockChatService)(nil).SendMessage), userID, body)
}

// ReceiveMessage mocks base method
func (m *MockChatService) ReceiveMessage(userID int, from time.Time) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMessage", userID, from)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage
func (mr *MockChatServiceMockRecorder) ReceiveMessage(userID, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*MockChatService)(nil).ReceiveMessage), userID, from)
}

// IsUserFree mocks base method
func (m *MockChatService) IsUserFree(userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserFree", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserFree indicates an expected call of IsUserFree
func (mr *MockChatServiceMockRecorder) IsUserFree(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserFree", reflect.TypeOf((*MockChatService)(nil).IsUserFree), userID)
}

// CountMembersInRoomOfUser mocks base method
func (m *MockChatService) CountMembersInRoomOfUser(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMembersInRoomOfUser", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMembersInRoomOfUser indicates an expected call of CountMembersInRoomOfUser
func (mr *MockChatServiceMockRecorder) CountMembersInRoomOfUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMembersInRoomOfUser", reflect.TypeOf((*MockChatService)(nil).CountMembersInRoomOfUser), userID)
}
