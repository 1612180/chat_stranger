// Code generated by MockGen. DO NOT EDIT.
// Source: chat.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "github.com/1612180/chat_stranger/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockChatRepo is a mock of ChatRepo interface
type MockChatRepo struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepoMockRecorder
}

// MockChatRepoMockRecorder is the mock recorder for MockChatRepo
type MockChatRepoMockRecorder struct {
	mock *MockChatRepo
}

// NewMockChatRepo creates a new mock instance
func NewMockChatRepo(ctrl *gomock.Controller) *MockChatRepo {
	mock := &MockChatRepo{ctrl: ctrl}
	mock.recorder = &MockChatRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatRepo) EXPECT() *MockChatRepoMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method
func (m *MockChatRepo) CreateRoom() (model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom")
	ret0, _ := ret[0].(model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom
func (mr *MockChatRepoMockRecorder) CreateRoom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockChatRepo)(nil).CreateRoom))
}

// FindRooms mocks base method
func (m *MockChatRepo) FindRooms() ([]model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRooms")
	ret0, _ := ret[0].([]model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRooms indicates an expected call of FindRooms
func (mr *MockChatRepoMockRecorder) FindRooms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRooms", reflect.TypeOf((*MockChatRepo)(nil).FindRooms))
}

// FindRoomOfUser mocks base method
func (m *MockChatRepo) FindRoomOfUser(userID int) (model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoomOfUser", userID)
	ret0, _ := ret[0].(model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoomOfUser indicates an expected call of FindRoomOfUser
func (mr *MockChatRepoMockRecorder) FindRoomOfUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoomOfUser", reflect.TypeOf((*MockChatRepo)(nil).FindRoomOfUser), userID)
}

// CountMembersInRoom mocks base method
func (m *MockChatRepo) CountMembersInRoom(roomID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMembersInRoom", roomID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMembersInRoom indicates an expected call of CountMembersInRoom
func (mr *MockChatRepoMockRecorder) CountMembersInRoom(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMembersInRoom", reflect.TypeOf((*MockChatRepo)(nil).CountMembersInRoom), roomID)
}

// FindUsersInRoom mocks base method
func (m *MockChatRepo) FindUsersInRoom(roomID int) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsersInRoom", roomID)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsersInRoom indicates an expected call of FindUsersInRoom
func (mr *MockChatRepoMockRecorder) FindUsersInRoom(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsersInRoom", reflect.TypeOf((*MockChatRepo)(nil).FindUsersInRoom), roomID)
}

// CountMembersOfUser mocks base method
func (m *MockChatRepo) CountMembersOfUser(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMembersOfUser", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMembersOfUser indicates an expected call of CountMembersOfUser
func (mr *MockChatRepoMockRecorder) CountMembersOfUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMembersOfUser", reflect.TypeOf((*MockChatRepo)(nil).CountMembersOfUser), userID)
}

// CreateMember mocks base method
func (m *MockChatRepo) CreateMember(userID, roomID int) (model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", userID, roomID)
	ret0, _ := ret[0].(model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMember indicates an expected call of CreateMember
func (mr *MockChatRepoMockRecorder) CreateMember(userID, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockChatRepo)(nil).CreateMember), userID, roomID)
}

// DeleteMember mocks base method
func (m *MockChatRepo) DeleteMember(userID, roomID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", userID, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember
func (mr *MockChatRepoMockRecorder) DeleteMember(userID, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockChatRepo)(nil).DeleteMember), userID, roomID)
}

// CreateMessage mocks base method
func (m *MockChatRepo) CreateMessage(roomID, userID int, body string) (model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", roomID, userID, body)
	ret0, _ := ret[0].(model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage
func (mr *MockChatRepoMockRecorder) CreateMessage(roomID, userID, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockChatRepo)(nil).CreateMessage), roomID, userID, body)
}

// DeleteMessagesOfRoom mocks base method
func (m *MockChatRepo) DeleteMessagesOfRoom(roomID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessagesOfRoom", roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessagesOfRoom indicates an expected call of DeleteMessagesOfRoom
func (mr *MockChatRepoMockRecorder) DeleteMessagesOfRoom(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessagesOfRoom", reflect.TypeOf((*MockChatRepo)(nil).DeleteMessagesOfRoom), roomID)
}

// FindMessagesOfRoomFromTime mocks base method
func (m *MockChatRepo) FindMessagesOfRoomFromTime(roomID int, from time.Time) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMessagesOfRoomFromTime", roomID, from)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMessagesOfRoomFromTime indicates an expected call of FindMessagesOfRoomFromTime
func (mr *MockChatRepoMockRecorder) FindMessagesOfRoomFromTime(roomID, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMessagesOfRoomFromTime", reflect.TypeOf((*MockChatRepo)(nil).FindMessagesOfRoomFromTime), roomID, from)
}
