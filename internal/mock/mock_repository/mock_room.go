// Code generated by MockGen. DO NOT EDIT.
// Source: room.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "github.com/1612180/chat_stranger/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockRoomRepository is a mock of RoomRepository interface
type MockRoomRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoomRepositoryMockRecorder
}

// MockRoomRepositoryMockRecorder is the mock recorder for MockRoomRepository
type MockRoomRepositoryMockRecorder struct {
	mock *MockRoomRepository
}

// NewMockRoomRepository creates a new mock instance
func NewMockRoomRepository(ctrl *gomock.Controller) *MockRoomRepository {
	mock := &MockRoomRepository{ctrl: ctrl}
	mock.recorder = &MockRoomRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoomRepository) EXPECT() *MockRoomRepositoryMockRecorder {
	return m.recorder
}

// Limit mocks base method
func (m *MockRoomRepository) Limit() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit")
	ret0, _ := ret[0].(int)
	return ret0
}

// Limit indicates an expected call of Limit
func (mr *MockRoomRepositoryMockRecorder) Limit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockRoomRepository)(nil).Limit))
}

// FindEmpty mocks base method
func (m *MockRoomRepository) FindEmpty() (*model.Room, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEmpty")
	ret0, _ := ret[0].(*model.Room)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindEmpty indicates an expected call of FindEmpty
func (mr *MockRoomRepositoryMockRecorder) FindEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEmpty", reflect.TypeOf((*MockRoomRepository)(nil).FindEmpty))
}

// FindNext mocks base method
func (m *MockRoomRepository) FindNext() (*model.Room, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNext")
	ret0, _ := ret[0].(*model.Room)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindNext indicates an expected call of FindNext
func (mr *MockRoomRepositoryMockRecorder) FindNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNext", reflect.TypeOf((*MockRoomRepository)(nil).FindNext))
}

// Create mocks base method
func (m *MockRoomRepository) Create() (*model.Room, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(*model.Room)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRoomRepositoryMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoomRepository)(nil).Create))
}

// Join mocks base method
func (m *MockRoomRepository) Join(userID, roomID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", userID, roomID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Join indicates an expected call of Join
func (mr *MockRoomRepositoryMockRecorder) Join(userID, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockRoomRepository)(nil).Join), userID, roomID)
}

// LatestMessage mocks base method
func (m *MockRoomRepository) LatestMessage(roomID int, fromTime time.Time) ([]*model.Message, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestMessage", roomID, fromTime)
	ret0, _ := ret[0].([]*model.Message)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LatestMessage indicates an expected call of LatestMessage
func (mr *MockRoomRepositoryMockRecorder) LatestMessage(roomID, fromTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestMessage", reflect.TypeOf((*MockRoomRepository)(nil).LatestMessage), roomID, fromTime)
}

// CreateMessage mocks base method
func (m *MockRoomRepository) CreateMessage(message *model.Message) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", message)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CreateMessage indicates an expected call of CreateMessage
func (mr *MockRoomRepositoryMockRecorder) CreateMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockRoomRepository)(nil).CreateMessage), message)
}
