// Code generated by MockGen. DO NOT EDIT.
// Source: member.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMemberRepo is a mock of MemberRepo interface
type MockMemberRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMemberRepoMockRecorder
}

// MockMemberRepoMockRecorder is the mock recorder for MockMemberRepo
type MockMemberRepoMockRecorder struct {
	mock *MockMemberRepo
}

// NewMockMemberRepo creates a new mock instance
func NewMockMemberRepo(ctrl *gomock.Controller) *MockMemberRepo {
	mock := &MockMemberRepo{ctrl: ctrl}
	mock.recorder = &MockMemberRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMemberRepo) EXPECT() *MockMemberRepoMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMemberRepo) Create(userID, roomID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, roomID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockMemberRepoMockRecorder) Create(userID, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMemberRepo)(nil).Create), userID, roomID)
}

// Delete mocks base method
func (m *MockMemberRepo) Delete(userID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMemberRepoMockRecorder) Delete(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMemberRepo)(nil).Delete), userID)
}

// CountByRoom mocks base method
func (m *MockMemberRepo) CountByRoom(roomID int) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByRoom", roomID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CountByRoom indicates an expected call of CountByRoom
func (mr *MockMemberRepoMockRecorder) CountByRoom(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByRoom", reflect.TypeOf((*MockMemberRepo)(nil).CountByRoom), roomID)
}

// CountByUser mocks base method
func (m *MockMemberRepo) CountByUser(userID int) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByUser", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CountByUser indicates an expected call of CountByUser
func (mr *MockMemberRepoMockRecorder) CountByUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByUser", reflect.TypeOf((*MockMemberRepo)(nil).CountByUser), userID)
}
