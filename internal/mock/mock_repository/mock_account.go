// Code generated by MockGen. DO NOT EDIT.
// Source: account.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "github.com/1612180/chat_stranger/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountRepo is a mock of AccountRepo interface
type MockAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepoMockRecorder
}

// MockAccountRepoMockRecorder is the mock recorder for MockAccountRepo
type MockAccountRepoMockRecorder struct {
	mock *MockAccountRepo
}

// NewMockAccountRepo creates a new mock instance
func NewMockAccountRepo(ctrl *gomock.Controller) *MockAccountRepo {
	mock := &MockAccountRepo{ctrl: ctrl}
	mock.recorder = &MockAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountRepo) EXPECT() *MockAccountRepoMockRecorder {
	return m.recorder
}

// FindUserCredential mocks base method
func (m *MockAccountRepo) FindUserCredential(userID int) (model.User, model.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserCredential", userID)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(model.Credential)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindUserCredential indicates an expected call of FindUserCredential
func (mr *MockAccountRepoMockRecorder) FindUserCredential(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserCredential", reflect.TypeOf((*MockAccountRepo)(nil).FindUserCredential), userID)
}

// FindUserCredentialByRegName mocks base method
func (m *MockAccountRepo) FindUserCredentialByRegName(regName string) (model.User, model.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserCredentialByRegName", regName)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(model.Credential)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindUserCredentialByRegName indicates an expected call of FindUserCredentialByRegName
func (mr *MockAccountRepoMockRecorder) FindUserCredentialByRegName(regName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserCredentialByRegName", reflect.TypeOf((*MockAccountRepo)(nil).FindUserCredentialByRegName), regName)
}

// CreateUserCredential mocks base method
func (m *MockAccountRepo) CreateUserCredential(showName, regName, hashedPass string) (model.User, model.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserCredential", showName, regName, hashedPass)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(model.Credential)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUserCredential indicates an expected call of CreateUserCredential
func (mr *MockAccountRepoMockRecorder) CreateUserCredential(showName, regName, hashedPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserCredential", reflect.TypeOf((*MockAccountRepo)(nil).CreateUserCredential), showName, regName, hashedPass)
}

// UpdateUser mocks base method
func (m *MockAccountRepo) UpdateUser(userID int, showName, gender string, birthYear int) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", userID, showName, gender, birthYear)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockAccountRepoMockRecorder) UpdateUser(userID, showName, gender, birthYear interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAccountRepo)(nil).UpdateUser), userID, showName, gender, birthYear)
}
